// Generated by CoffeeScript 1.10.0
(function() {
  var boxes, bufferSize, calFullHeight, calHeight, calWidth, generateConvert, lineWidth, metrics;

  lineWidth = 50;

  bufferSize = 75;

  calWidth = 4200;

  calFullHeight = 3300;

  calHeight = calFullHeight - bufferSize;


  /*
  +---------+----------+
  |         |          |
  |         |    1     |
  |         +-----+----+
  |    0    |  3  |    |
  |         +--+--+    |
  |         |  |  | 2  |
  |         | 4|5 |    |
  +---------+--+--+----+
   */

  boxes = [];

  boxes[0] = {
    top: 0,
    left: 0,
    width: 2000,
    height: calHeight
  };

  boxes[1] = {
    top: 0,
    left: boxes[0].width + lineWidth
  };

  boxes[1].width = calWidth - boxes[1].left;

  boxes[1].height = Math.round(boxes[1].width * 0.75);

  boxes[2] = {
    top: boxes[1].height + lineWidth,
    width: 945
  };

  boxes[2].height = calHeight - boxes[2].top;

  boxes[2].left = calWidth - boxes[2].width;

  boxes[3] = {
    top: boxes[2].top,
    left: boxes[1].left,
    width: calWidth - boxes[0].width - boxes[2].width - 2 * lineWidth,
    height: 756
  };

  boxes[4] = {
    top: boxes[1].height + boxes[3].height + 2 * lineWidth,
    left: boxes[3].left,
    width: 560
  };

  boxes[4].height = calHeight - boxes[4].top;

  boxes[5] = {
    top: boxes[4].top,
    left: boxes[4].left + boxes[4].width + lineWidth,
    width: calWidth - boxes[0].width - boxes[4].width - boxes[2].width - 3 * lineWidth,
    height: boxes[4].height
  };

  metrics = {};

  generateConvert = function() {
    var f, k;
    return ("convert -size " + calWidth + "x" + calFullHeight + " xc:black \\\n") + ((function() {
      var results;
      results = [];
      for (k in metrics) {
        f = metrics[k];
        results.push("  \\( " + f.name + " -crop " + f.crop.cropW + "x" + f.crop.cropH + "+" + f.crop.cropX + "+" + f.crop.cropY + " -resize " + f.width + "x" + f.height + " \\) -geometry +" + f.pos.left + "+" + f.pos.top + " -composite \\\n");
      }
      return results;
    })()).join('') + '  out.png';
  };

  $(function() {
    var box, i, k, len, selectedBox, v;
    for (i = 0, len = boxes.length; i < len; i++) {
      box = boxes[i];
      for (k in box) {
        v = box[k];
        box[k] = v + "px";
      }
      $('<div>').css(box).appendTo('#calendar');
    }
    $('#file').change(function() {
      var file, reader;
      file = this.files[0];
      if (!file) {
        return;
      }
      reader = new FileReader;
      reader.onloadend = function() {
        var $box, $img, height, key, pos, width;
        $box = $(selectedBox);
        width = $box.width();
        console.log(width);
        height = $box.height();
        $img = $('<img>').attr('src', reader.result).appendTo($box);
        pos = $box.position();
        key = [pos.top, pos.left].join();
        $box.css('cursor', 'default').off('click');
        return $img.cropbox({
          width: width,
          height: height,
          zoom: 10,
          controls: false,
          showControls: 'never'
        }).on('cropbox', function(e, crop) {
          metrics[key] = {
            crop: crop,
            width: width,
            height: height,
            pos: pos,
            name: file.name
          };
          return console.log(generateConvert());
        });
      };
      return reader.readAsDataURL(file);
    });
    selectedBox = null;
    return $('#calendar > div').click(function(e) {
      selectedBox = this;
      e.preventDefault();
      return $('#file')[0].click();
    });
  });

}).call(this);

//# sourceMappingURL=pan.js.map
