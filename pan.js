// Generated by CoffeeScript 1.10.0
(function() {
  var boxes, bufferSize, calFullHeight, calHeight, calWidth, convertDSLToCLI, cutBox, escapeShellArg, generateConvert, i, j, len, lineWidth, loadTemplate, metrics, selectedBox, templates, tmpl, y;

  lineWidth = 50;

  bufferSize = 75;

  calWidth = 4200;

  calFullHeight = 3300;

  calHeight = calFullHeight - bufferSize;

  selectedBox = null;

  metrics = null;


  /*
  +---------+----------+
  |         |          |
  |         |    1     |
  |         +-----+----+
  |    0    |  3  |    |
  |         +--+--+    |
  |         |  |  | 2  |
  |         | 4|5 |    |
  +---------+--+--+----+
   */

  templates = [
    {
      cuts: [
        {
          box: 0,
          left: {
            pct: 0.4763
          }
        }, {
          box: 1,
          top: {
            aspect: 4 / 3
          }
        }, {
          box: 2,
          right: {
            aspect: 3 / 5
          }
        }, {
          box: 3,
          top: {
            aspect: 4 / 3
          }
        }, {
          box: 4,
          left: {
            pct: 0.5
          }
        }
      ]
    }, {
      cuts: [],
      buffer: 'top'
    }
  ];

  cutBox = function(boxes, arg1) {
    var bottom, box, box1, box2, h, left, pri, priH, priW, ref, right, top, w, x, y;
    box = arg1.box, top = arg1.top, left = arg1.left, bottom = arg1.bottom, right = arg1.right;
    ref = boxes[box], x = ref.x, y = ref.y, w = ref.w, h = ref.h;
    if (pri = left || right) {
      priW = Math.round(pri.pct != null ? w * pri.pct : h * pri.aspect);
      if (left) {
        box1 = {
          x: x,
          y: y,
          w: priW,
          h: h
        };
        box2 = {
          x: x + priW + lineWidth,
          y: y,
          w: w - priW - lineWidth,
          h: h
        };
      } else {
        box1 = {
          x: x + w - priW,
          y: y,
          w: priW,
          h: h
        };
        box2 = {
          x: x,
          y: y,
          w: w - priW - lineWidth,
          h: h
        };
      }
    } else {
      pri = top || bottom;
      priH = Math.round(pri.pct != null ? h * pri.pct : w / pri.aspect);
      if (top) {
        box1 = {
          x: x,
          y: y,
          w: w,
          h: priH
        };
        box2 = {
          x: x,
          y: y + priH + lineWidth,
          w: w,
          h: h - priH - lineWidth
        };
      } else {
        box1 = {
          x: x,
          y: h - priH,
          w: w,
          h: priH
        };
        box2 = {
          x: x,
          y: y,
          w: w,
          h: h - priH - lineWidth
        };
      }
    }
    boxes.splice(box, 1);
    return boxes.push(box1, box2);
  };

  for (i = j = 0, len = templates.length; j < len; i = ++j) {
    tmpl = templates[i];
    y = tmpl.buffer === 'top' ? bufferSize : 0;
    boxes = [
      {
        x: 0,
        y: y,
        w: calWidth,
        h: calHeight
      }
    ];
    tmpl.cuts.forEach(function(cut) {
      return cutBox(boxes, cut);
    });
    templates[i] = boxes.map(function(arg1) {
      var h, w, x, y;
      x = arg1.x, y = arg1.y, w = arg1.w, h = arg1.h;
      return {
        top: y + 'px',
        left: x + 'px',
        width: w + 'px',
        height: h + 'px'
      };
    });
  }

  escapeShellArg = function(arg) {
    var esc1, esc2, esc3;
    esc1 = "'" + arg.replace(/(['\\])/g, '\\$1') + "'";
    esc2 = '"' + arg.replace(/([!$"\\])/g, '\\$1') + '"';
    esc3 = arg.replace(/([^\w=+:,.\/-])/g, '\\$1');
    return [esc1, esc2, esc3].sort(function(a, b) {
      return a.length - b.length;
    })[0];
  };

  convertDSLToCLI = function(cmds) {
    var k, v, wh, xy;
    if (cmds instanceof Array) {
      return cmds.map(convertDSLToCLI).join(' ');
    }
    if ('object' === typeof cmds) {
      return ((function() {
        var results;
        results = [];
        for (k in cmds) {
          v = cmds[k];
          if (v === true) {
            results.push("-" + k);
          } else if (v === false) {
            results.push("+" + k);
          } else if ('object' === typeof v) {
            wh = xy = '';
            if ((v.w != null) && (v.h != null)) {
              wh = v.w + "x" + v.h;
            }
            if ((v.x != null) && (v.y != null)) {
              xy = "+" + v.x + "+" + v.y;
            }
            results.push("-" + k + " " + wh + xy);
          } else {
            results.push("-" + k + " " + (escapeShellArg(v)));
          }
        }
        return results;
      })()).join(' ');
    } else {
      return cmds;
    }
  };

  generateConvert = function() {
    var caption, f, k;
    return ("convert -size " + calWidth + "x" + calFullHeight + " xc:black ") + ((function() {
      var results;
      results = [];
      for (k in metrics) {
        f = metrics[k];
        caption = '';
        if (f.caption) {
          caption = "\\( -background none -size " + (Math.round(f.width * 0.85)) + "x500 -stroke none -fill white -font ../../fonts/MyriadPro-Bold.otf label:" + (escapeShellArg(f.caption)) + " -trim \\( +clone -background black -shadow 100x10+0+0 -level '0,25%' +channel \\) +swap -background none -layers merge +repage \\) -gravity south -geometry +0+3 -composite ";
        }
        results.push("\\( " + (escapeShellArg(f.name)) + " -normalize -crop " + f.crop.cropW + "x" + f.crop.cropH + "+" + f.crop.cropX + "+" + f.crop.cropY + " -resize " + f.width + "x" + f.height + " " + caption + " \\) -gravity northwest -geometry +" + f.pos.left + "+" + f.pos.top + " -composite ");
      }
      return results;
    })()).join(' ') + ' out.png';
  };

  loadTemplate = function(i) {
    var $cal, box, l, len1, ref;
    metrics = {};
    $cal = $('#calendar').empty();
    ref = templates[i];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      box = ref[l];
      $('<div>').css(box).appendTo($cal);
    }
    return $('#calendar > div').click(function(e) {
      var pos;
      e.preventDefault();
      if ($('body').hasClass('deleting')) {
        $(this).find('.cropFrame').remove();
        pos = $(this).position();
        delete metrics[[pos.left, pos.top]];
        return $('body').removeClass('deleting');
      } else if ($(this).find('img').length === 0) {
        selectedBox = this;
        return $('#file')[0].click();
      }
    });
  };

  $(function() {
    var l, len1, template;
    $('#file').change(function() {
      var file, reader;
      file = this.files[0];
      if (!file) {
        return;
      }
      reader = new FileReader;
      reader.onloadend = function() {
        var $box, $img, height, key, pos, width;
        $box = $(selectedBox);
        width = $box.width();
        height = $box.height();
        $img = $('<img>').attr('src', reader.result).appendTo($box);
        pos = $box.position();
        key = [pos.left, pos.top].join();
        return $img.cropbox({
          width: width,
          height: height,
          zoom: 100,
          controls: false,
          showControls: 'never'
        }).on('cropbox', function(e, crop) {
          return metrics[key] = {
            crop: crop,
            width: width,
            height: height,
            pos: pos,
            name: file.name
          };
        });
      };
      return reader.readAsDataURL(file);
    });
    $('#delete').click(function() {
      return $('body').toggleClass('deleting');
    });
    $('#export').click(function() {
      return prompt('Paste this to your shell', generateConvert());
    });
    for (i = l = 0, len1 = templates.length; l < len1; i = ++l) {
      template = templates[i];
      $('<option>').val(i).text("Template " + (i + 1)).appendTo('#template');
    }
    return $('#template').show().change(function() {
      return loadTemplate(this.selectedIndex);
    }).change();
  });

}).call(this);

//# sourceMappingURL=pan.js.map
